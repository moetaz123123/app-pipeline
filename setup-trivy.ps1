# Script de configuration Trivy pour Jenkins
# Ex√©cuter ce script avant de lancer le pipeline Jenkins

Write-Host "üîß Configuration de Trivy pour Jenkins..." -ForegroundColor Green

# Chemin vers Trivy
$TRIVY_PATH = "C:\Users\User\Downloads\trivy_0.63.0_windows-64bit\trivy.exe"

# V√©rifier si Trivy existe
if (-not (Test-Path $TRIVY_PATH)) {
    Write-Host "‚ùå Trivy non trouv√© √†: $TRIVY_PATH" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Trivy trouv√©: $TRIVY_PATH" -ForegroundColor Green

# Cr√©er le r√©pertoire de cache
$CACHE_DIR = "C:\ProgramData\Jenkins\.jenkins\workspace\pipeline-laravel\.trivycache"
if (-not (Test-Path $CACHE_DIR)) {
    New-Item -ItemType Directory -Path $CACHE_DIR -Force
    Write-Host "üìÅ R√©pertoire de cache cr√©√©: $CACHE_DIR" -ForegroundColor Yellow
}

# T√©l√©charger la base de donn√©es de vuln√©rabilit√©s
Write-Host "üì• T√©l√©chargement de la base de donn√©es Trivy..." -ForegroundColor Yellow

$success = $false

try {
    # Tentative 1: T√©l√©chargement normal
    Write-Host "Tentative 1: T√©l√©chargement normal..." -ForegroundColor Cyan
    & $TRIVY_PATH image --download-db-only --cache-dir $CACHE_DIR
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Base de donn√©es t√©l√©charg√©e avec succ√®s" -ForegroundColor Green
        $success = $true
    } else {
        throw "√âchec du t√©l√©chargement"
    }
} catch {
    Write-Host "‚ö†Ô∏è Tentative 1 √©chou√©e, tentative 2 avec timeout √©tendu..." -ForegroundColor Yellow
    try {
        # Tentative 2: Avec timeout √©tendu
        & $TRIVY_PATH image --download-db-only --cache-dir $CACHE_DIR --timeout 600s
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Base de donn√©es t√©l√©charg√©e avec succ√®s (tentative 2)" -ForegroundColor Green
            $success = $true
        } else {
            throw "√âchec du t√©l√©chargement"
        }
    } catch {
        Write-Host "‚ö†Ô∏è Tentative 2 √©chou√©e, tentative 3 avec options de s√©curit√©..." -ForegroundColor Yellow
        try {
            # Tentative 3: Avec options de s√©curit√©
            & $TRIVY_PATH image --download-db-only --cache-dir $CACHE_DIR --timeout 600s --insecure
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Base de donn√©es t√©l√©charg√©e avec succ√®s (tentative 3)" -ForegroundColor Green
                $success = $true
            } else {
                Write-Host "‚ùå Impossible de t√©l√©charger la base de donn√©es Trivy" -ForegroundColor Red
                Write-Host "üí° Solutions possibles:" -ForegroundColor Yellow
                Write-Host "   1. V√©rifier la connectivit√© r√©seau" -ForegroundColor White
                Write-Host "   2. Configurer un proxy si n√©cessaire" -ForegroundColor White
                Write-Host "   3. Ex√©cuter manuellement: $TRIVY_PATH image --download-db-only" -ForegroundColor White
                exit 1
            }
        } catch {
            Write-Host "‚ùå Toutes les tentatives ont √©chou√©" -ForegroundColor Red
            exit 1
        }
    }
}

if ($success) {
    # Test de scan rapide
    Write-Host "üß™ Test de scan rapide..." -ForegroundColor Yellow
    try {
        & $TRIVY_PATH fs . --skip-files vendor/ --severity CRITICAL --format table --cache-dir $CACHE_DIR --timeout 30s
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Test de scan r√©ussi" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Test de scan √©chou√©, mais la base de donn√©es est t√©l√©charg√©e" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ö†Ô∏è Test de scan √©chou√©, mais la base de donn√©es est t√©l√©charg√©e" -ForegroundColor Yellow
    }
    Write-Host "üéâ Configuration Trivy termin√©e!" -ForegroundColor Green
    Write-Host "üí° Le pipeline Jenkins peut maintenant utiliser Trivy avec le cache local" -ForegroundColor Cyan
} 